AWSTemplateFormatVersion: '2010-09-09'
Description: An AWS Serverless Specification template describing your function.
Parameters:
  TransactionDataTableName:
    Description: DynamoDB Table Name for Transaction Data
    Type: String
    Default: ChainsferTransactionData
  WalletAddressesDataTableName:
    Description: Table Name for Wallet Addresses Data
    Type: String
    Default: ChainsferWalletAddressesData
  UserTableName:
    Description: Table Name for user Data
    Type: String
    Default: UserTable
  EthContractsTableName:
    Description: Table Name for Eth contracts
    Type: String
    Default: EthContracts
  TransactionConfirmationSQSName:
    Description: Transaction Confirmation SQS Name
    Type: String
    Default: ChainsferTransactionConfirmationSQS
  ENV:
    Description: Development ENV
    Type: String
    Default: Dev
  EnvLowercase:
    Description: Development ENV (lowercase)
    Type: String
    Default: dev
  ApiRoleVersion:
    Description: Api Role Version
    Type: String
    Default: '2012-10-17'
  LambdaCheckTxExpirationRate:
    Description: The rate that triggers checkTxExpiration Lambda function
    Default: rate(2 minutes)
    Type: String
  LambdaValidateTxRate:
    Description: The rate that triggers validateTx Lambda function
    Default: rate(1 minute)
    Type: String
  EthPrivateKey:
    Description: The ETH private key for referal
    Default: '0x0'
    Type: String
  BtcWif:
    Description: The BTC WIF for BTC multisig
    Default: '0x0'
    Type: String
  ReferralWalletTableName:
    Description: The name of the referal wallet table
    Default: ChainsferReferralWalletData
    Type: String
  EmailRecordsTableName:
    Description: The name of the sent Email records table
    Default: EmailRecordsTable
    Type: String
  SESConfigSetName:
    Description: SES configuration set
    Default: emailConfigSet
    Type: String
  CloudfrontDistributionName:
    Description: Cloudfront distribution
    Default: ChainsfrApi
    Type: String
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 15
    Environment:
      Variables:
        SQS_NAME:
          'Fn::Join':
            - ''
            - - Ref: TransactionConfirmationSQSName
              - Ref: ENV
        TRANSACTION_DATA_TABLE_NAME:
          'Fn::Join':
            - ''
            - - Ref: TransactionDataTableName
              - Ref: ENV
        WALLET_ADDRESSES_DATA_TABLE_NAME:
          'Fn::Join':
            - ''
            - - Ref: WalletAddressesDataTableName
              - Ref: ENV
        USER_TABLE_NAME:
          'Fn::Join':
            - ''
            - - Ref: UserTableName
              - Ref: ENV
        ETH_CONTRACTS_TABLE_NAME:
          'Fn::Join':
            - ''
            - - Ref: EthContractsTableName
              - Ref: ENV
        ENV_VALUE:
          Ref: ENV
        ETH_PRIVATE_KEY:
          Ref: EthPrivateKey
        BTC_WIF:
          Ref: BtcWif
        REFERRAL_WALLET_TABLE_NAME:
          'Fn::Join':
            - ''
            - - Ref: ReferralWalletTableName
              - Ref: ENV
        EMAIL_RECORDS_TABLE_NAME:
          'Fn::Join':
            - ''
            - - Ref: EmailRecordsTableName
              - Ref: ENV
        SES_CONFIG_SET_NAME:
          'Fn::Join':
            - ''
            - - Ref: SESConfigSetName
              - Ref: ENV
Resources:
  stream:
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - LambdaDynamodbStream
            - Ref: ENV
      MemorySize: 128
      Handler: dist/aws/stream.handler
      Role: >-
        arn:aws:iam::727151012682:role/cloud9-chainsfer-transferRequestRole-YJZX77XEMNPC
      Description: 'Tracking tx state in transfer data SQS'
    Type: 'AWS::Serverless::Function'
  transferRequest:
    Properties:
      Timeout: 600
      FunctionName:
        'Fn::Join':
          - ''
          - - LambdaTransfer
            - Ref: ENV
      Role: >-
        arn:aws:iam::727151012682:role/cloud9-chainsfer-transferRequestRole-YJZX77XEMNPC
      Handler: dist/aws/transfer.handler
      MemorySize: 128
      Description: 'Handle user transfer requests'
    Type: 'AWS::Serverless::Function'
  TransferRequestApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - transferRequest
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Sub': >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChainsferRestApi}/*/POST/transfer
    DependsOn:
      - ChainsferRestApi
  userDataRequest:
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - LambdaUserData
            - Ref: ENV
      Role: >-
        arn:aws:iam::727151012682:role/cloud9-chainsfer-transferRequestRole-YJZX77XEMNPC
      Handler: dist/aws/user.handler
      MemorySize: 128
      Description: 'Handle user data requests'
    Type: 'AWS::Serverless::Function'
  UserDataRequestApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - userDataRequest
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Sub': >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChainsferRestApi}/*/POST/user
    DependsOn:
      - ChainsferRestApi
  referralWalletRequest:
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - LambdaReferralWallet
            - Ref: ENV
      Role: >-
        arn:aws:iam::727151012682:role/cloud9-chainsfer-transferRequestRole-YJZX77XEMNPC
      Handler: dist/aws/referralWallet.handler
      MemorySize: 128
      Description: 'Handle referral wallet transfer requests'
    Type: 'AWS::Serverless::Function'
  ReferralWalletRequestApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - referralWalletRequest
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Sub': >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChainsferRestApi}/*/POST/referralWallet
    DependsOn:
      - ChainsferRestApi

  ethContractsRequest:
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - ethContracts
            - Ref: ENV
      Role: >-
        arn:aws:iam::727151012682:role/cloud9-chainsfer-transferRequestRole-YJZX77XEMNPC
      Handler: dist/aws/ethContracts.handler
      MemorySize: 128
      Description: 'Handle eth contracts requests'
    Type: 'AWS::Serverless::Function'

  EthContractsRequestApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - ethContractsRequest
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Sub': >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChainsferRestApi}/*/POST/ethContracts
    DependsOn:
      - ChainsferRestApi
  resourceOptionsMethod:
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - resourceOptionsMethod
            - Ref: ENV
      Role: >-
        arn:aws:iam::727151012682:role/cloud9-chainsfer-transferRequestRole-YJZX77XEMNPC
      Handler: dist/aws/resourceOptionsMethod.handler
      MemorySize: 128
      Description: 'Global options config for lambda functions'
    Type: 'AWS::Serverless::Function'
  resourceOptionsMethodApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - resourceOptionsMethod
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Sub': >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChainsferRestApi}/*/OPTIONS/transfer
    DependsOn:
      - ChainsferRestApi
  resourceOptionsMethodUserApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - resourceOptionsMethod
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Sub': >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChainsferRestApi}/*/OPTIONS/user
    DependsOn:
      - ChainsferRestApi
  resourceOptionsMethodReferralWalletApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - resourceOptionsMethod
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Sub': >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChainsferRestApi}/*/OPTIONS/referralWallet
    DependsOn:
      - ChainsferRestApi
  resourceOptionsMethodEthContractsApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - resourceOptionsMethod
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Sub': >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChainsferRestApi}/*/OPTIONS/ethContracts
    DependsOn:
      - ChainsferRestApi
  validateTx:
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - LambdaValidateTx
            - Ref: ENV
      Role: >-
        arn:aws:iam::727151012682:role/cloud9-chainsfer-transferRequestRole-YJZX77XEMNPC
      Handler: dist/aws/validateTx.handler
      MemorySize: 128
      Timeout: 900
      Description: 'Validate tx state and update transfer data'
    Type: 'AWS::Serverless::Function'
  emailErrorNotification:
    Properties:
      Timeout: 600
      FunctionName:
        'Fn::Join':
          - ''
          - - LambdaEmailErrorNotification
            - Ref: ENV
      Role: >-
        arn:aws:iam::727151012682:role/cloud9-chainsfer-transferRequestRole-YJZX77XEMNPC
      Handler: dist/aws/emailErrorNotification.handler
      MemorySize: 128
      Description: 'Handle email error notifications'
    Type: 'AWS::Serverless::Function'
  EmailErrorTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        'Fn::Join':
          - ''
          - - EmailErrorTopic
            - Ref: ENV
      Subscription:
        - Protocol: lambda
          Endpoint:
            'Fn::GetAtt':
              - emailErrorNotification
              - Arn
  EmailErrorNotificationInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - emailErrorNotification
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: EmailErrorTopic
  LambdaValidateTxSchedule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression:
        Ref: LambdaValidateTxRate
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - validateTx
              - Arn
          Id: LambdaValidateTxSchedule
  LambdaValidateTxSchedulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - validateTx
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - LambdaValidateTxSchedule
          - Arn
  checkTxExpiration:
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - LambdaCheckTxExpiration
            - Ref: ENV
      Role: >-
        arn:aws:iam::727151012682:role/cloud9-chainsfer-transferRequestRole-YJZX77XEMNPC
      Handler: dist/aws/checkTxExpiration.handler
      MemorySize: 128
      Timeout: 900
      Description: 'Check if a transfer request is expired'
    Type: 'AWS::Serverless::Function'
  LambdaCheckTxExpirationSchedule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression:
        Ref: LambdaCheckTxExpirationRate
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - checkTxExpiration
              - Arn
          Id: LambdaCheckTxExpirationSchedule
  LambdaCheckTxExpirationSchedulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - checkTxExpiration
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - LambdaCheckTxExpirationSchedule
          - Arn
  TransactionData:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        'Fn::Join':
          - ''
          - - Ref: TransactionDataTableName
            - Ref: ENV
      AttributeDefinitions:
        - AttributeName: transferId
          AttributeType: S
        - AttributeName: receivingId
          AttributeType: S
        - AttributeName: sendTxHash
          AttributeType: S
        - AttributeName: receiveTxHash
          AttributeType: S
        - AttributeName: cancelTxHash
          AttributeType: S
        - AttributeName: inEscrow
          AttributeType: N
        - AttributeName: destination
          AttributeType: S
        - AttributeName: sender
          AttributeType: S
        - AttributeName: created
          AttributeType: N
      KeySchema:
        - AttributeName: transferId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: receivingId-index
          KeySchema:
            - AttributeName: receivingId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: destination-index
          KeySchema:
            - AttributeName: destination
              KeyType: HASH
            - AttributeName: created
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: sender-index
          KeySchema:
            - AttributeName: sender
              KeyType: HASH
            - AttributeName: created
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: sendTxHash-index
          KeySchema:
            - AttributeName: sendTxHash
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
        - IndexName: receiveTxHash-index
          KeySchema:
            - AttributeName: receiveTxHash
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - receivingId
            ProjectionType: INCLUDE
        - IndexName: cancelTxHash-index
          KeySchema:
            - AttributeName: cancelTxHash
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
      StreamSpecification:
        StreamViewType: NEW_IMAGE
    DependsOn:
      - transferRequest
  WalletAddressesData:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        'Fn::Join':
          - ''
          - - Ref: WalletAddressesDataTableName
            - Ref: ENV
      AttributeDefinitions:
        - AttributeName: googleId
          AttributeType: S
      KeySchema:
        - AttributeName: googleId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  UserTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        'Fn::Join':
          - ''
          - - Ref: UserTableName
            - Ref: ENV
      AttributeDefinitions:
        - AttributeName: googleId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: googleId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: emailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: 'ALL'
      BillingMode: PAY_PER_REQUEST
  EthContractsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        'Fn::Join':
          - ''
          - - Ref: EthContractsTableName
            - Ref: ENV
      AttributeDefinitions:
        - AttributeName: cryptoType
          AttributeType: S
      KeySchema:
        - AttributeName: cryptoType
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  SESConfigSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name:
        'Fn::Join':
            - ''
            - - Ref: SESConfigSetName
              - Ref: ENV
  EmailRecordsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        'Fn::Join':
          - ''
          - - Ref: EmailRecordsTableName
            - Ref: ENV
      AttributeDefinitions:
        - AttributeName: messageId
          AttributeType: S
      KeySchema:
        - AttributeName: messageId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  ReferralWalletTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        'Fn::Join':
          - ''
          - - Ref: ReferralWalletTableName
            - Ref: ENV
      AttributeDefinitions:
        - AttributeName: googleId
          AttributeType: S
      KeySchema:
        - AttributeName: googleId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  TransactionDataStreamMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn:
        'Fn::GetAtt':
          - TransactionData
          - StreamArn
      FunctionName:
        'Fn::GetAtt':
          - stream
          - Arn
      StartingPosition: LATEST
  TransactionConfirmationQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName:
        'Fn::Join':
          - ''
          - - Ref: TransactionConfirmationSQSName
            - Ref: ENV
      DelaySeconds: 0
      VisibilityTimeout: 30
    DependsOn:
      - stream
  ChainsferRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name:
        'Fn::Join':
          - '-'
          - - Ref: 'AWS::StackName'
            - apigateway
      Description: API used for transfer requests
      FailOnWarnings: true
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version:
          Ref: ApiRoleVersion
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version:
              Ref: ApiRoleVersion
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: '*'
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn:
        'Fn::GetAtt':
          - ApiGatewayCloudWatchLogsRole
          - Arn
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ChainsferRestApiRequestPOST
      - ChainsferUserRestApiRequestPOST
    Properties:
      RestApiId:
        Ref: ChainsferRestApi
      StageName: Prod
  ChainsferRestApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: ChainsferRestApi
      ParentId:
        'Fn::GetAtt':
          - ChainsferRestApi
          - RootResourceId
      PathPart: transfer
  ChainsferRestApiRequestPOST:
    DependsOn: TransferRequestApiGatewayInvokePermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Sub':
            - >-
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn:
                'Fn::GetAtt':
                  - transferRequest
                  - Arn
      ResourceId:
        Ref: ChainsferRestApiResource
      RestApiId:
        Ref: ChainsferRestApi
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  ChainsferRestApiCORSOptionMethod:
    DependsOn: resourceOptionsMethodApiGatewayInvokePermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId:
        Ref: ChainsferRestApiResource
      RestApiId:
        Ref: ChainsferRestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Sub':
            - >-
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn:
                'Fn::GetAtt':
                  - resourceOptionsMethod
                  - Arn
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  ChainsferUserRestApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: ChainsferRestApi
      ParentId:
        'Fn::GetAtt':
          - ChainsferRestApi
          - RootResourceId
      PathPart: user
  ChainsferUserRestApiRequestPOST:
    DependsOn: UserDataRequestApiGatewayInvokePermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Sub':
            - >-
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn:
                'Fn::GetAtt':
                  - userDataRequest
                  - Arn
      ResourceId:
        Ref: ChainsferUserRestApiResource
      RestApiId:
        Ref: ChainsferRestApi
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  ChainsferUserRestApiCORSOptionMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: resourceOptionsMethodUserApiGatewayInvokePermission
    Properties:
      ResourceId:
        Ref: ChainsferUserRestApiResource
      RestApiId:
        Ref: ChainsferRestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Sub':
            - >-
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn:
                'Fn::GetAtt':
                  - resourceOptionsMethod
                  - Arn
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  EthContractsRestApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: ChainsferRestApi
      ParentId:
        'Fn::GetAtt':
          - ChainsferRestApi
          - RootResourceId
      PathPart: ethContracts
  EthContractsRestApiRequestPOST:
    DependsOn: EthContractsRequestApiGatewayInvokePermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Sub':
            - >-
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn:
                'Fn::GetAtt':
                  - ethContractsRequest
                  - Arn
      ResourceId:
        Ref: EthContractsRestApiResource
      RestApiId:
        Ref: ChainsferRestApi
  EthContractsRestApiCORSOptionMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: resourceOptionsMethodEthContractsApiGatewayInvokePermission
    Properties:
      ResourceId:
        Ref: EthContractsRestApiResource
      RestApiId:
        Ref: ChainsferRestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Sub':
            - >-
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn:
                'Fn::GetAtt':
                  - resourceOptionsMethod
                  - Arn
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  ChainsferReferralWalletRestApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: ChainsferRestApi
      ParentId:
        'Fn::GetAtt':
          - ChainsferRestApi
          - RootResourceId
      PathPart: referralWallet
  ChainsferReferralWalletRestApiRequestPOST:
    DependsOn: ReferralWalletRequestApiGatewayInvokePermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Sub':
            - >-
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn:
                'Fn::GetAtt':
                  - referralWalletRequest
                  - Arn
      ResourceId:
        Ref: ChainsferReferralWalletRestApiResource
      RestApiId:
        Ref: ChainsferRestApi
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  ChainsferReferralWalletRestApiCORSOptionMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: resourceOptionsMethodReferralWalletApiGatewayInvokePermission
    Properties:
      ResourceId:
        Ref: ChainsferReferralWalletRestApiResource
      RestApiId:
        Ref: ChainsferRestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Sub':
            - >-
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn:
                'Fn::GetAtt':
                  - resourceOptionsMethod
                  - Arn
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  # Create a cloudfront distribution to generate
  # a custom domain for the corresponding API gateway
  # resource
  #
  # Also introduce a switch for maintenance mode by
  # redirecting traffic to S3 bucket 
  # api.maintenance.chainsfr.com/down.js
  # and return http code 503 Service Unavailable
  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Comment: !Sub '${CloudfrontDistributionName}${ENV}'
        Origins:
          # API gateway origin
          - Id: !Sub 'ApiGatewayOrigin${ENV}'
            DomainName:
              'Fn::Join':
                - ''
                - - Ref: ChainsferRestApi
                  - .execute-api.
                  - Ref: 'AWS::Region'
                  - .amazonaws.com
            OriginPath: '/Prod'
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: match-viewer
          # Maintenance s3 bucket origin
          - Id: 'ChainsfrApiMaintenanceBucket'
            DomainName: api.maintenance.chainsfr.com.s3.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: ''
        # must use http2 to avoid
        # request failures in react
        HttpVersion: http2
        # CNAME for the custom domain
        Aliases: 
          - !Sub '${EnvLowercase}.api.chainsfr.com'
        DefaultCacheBehavior:
            TargetOriginId: !Sub 'ApiGatewayOrigin${ENV}'
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ForwardedValues:
              QueryString: 'true'
              Headers:
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
                - Origin
            DefaultTTL: 1
            MaxTTL: 1
            MinTTL: 1
            ViewerProtocolPolicy: allow-all
        CacheBehaviors:
          - AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
            TargetOriginId: ChainsfrApiMaintenanceBucket
            # To switch on maintenance mode
            # modify the PathPattern to '*'
            # in cloudfront console
            PathPattern: '/disabled/*'
            ForwardedValues:
              QueryString: 'true'
            DefaultTTL: 1
            MaxTTL: 1
            MinTTL: 1
            ViewerProtocolPolicy: allow-all
        # Little trick to make API to return
        # HTTP 503 in maintenance mode
        CustomErrorResponses:
          - ErrorCode: '404'
            ResponsePagePath: "/down.json"
            ResponseCode: '503'
            ErrorCachingMinTTL: '5'
        IPV6Enabled: 'true'
        ViewerCertificate:
          # we use ssl certificate for *.api.chainsfr.com
          AcmCertificateArn: 'arn:aws:acm:us-east-1:727151012682:certificate/c5bd5aac-0fe5-4a03-a2d2-221731dd6a2e'
          SslSupportMethod: 'sni-only'
          MinimumProtocolVersion: 'TLSv1.1_2016'
Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value: !Sub '${EnvLowercase}.api.chainsfr.com'
Transform: 'AWS::Serverless-2016-10-31'
